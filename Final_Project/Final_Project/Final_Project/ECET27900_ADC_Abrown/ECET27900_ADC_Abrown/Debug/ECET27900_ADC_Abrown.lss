
ECET27900_ADC_Abrown.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800200  00000a90  00000b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800230  00800230  00000b54  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001210  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee3  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000895  00000000  00000000  00002dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00003650  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069b  00000000  00000000  00003834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031f  00000000  00000000  00003ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000041ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e9       	ldi	r30, 0x90	; 144
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 33       	cpi	r26, 0x30	; 48
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e3       	ldi	r26, 0x30	; 48
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 33       	cpi	r26, 0x36	; 54
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	2d d1       	rcall	.+602    	; 0x37a <main>
 120:	b5 c4       	rjmp	.+2410   	; 0xa8c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_ADC>:
#include <avr/io.h>
#include "init_ports.h"
#include "ADC.h"

void init_ADC(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	// select input channels AD0 thru ADC2
	ADMUX |= ((1 << MUX2) | (1 << MUX1) | (1 << MUX0)); 
 12c:	8c e7       	ldi	r24, 0x7C	; 124
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2c e7       	ldi	r18, 0x7C	; 124
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	27 60       	ori	r18, 0x07	; 7
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
	
	// default at ADC0 on PORTF
	ADMUX |= 0x00;
 13e:	8c e7       	ldi	r24, 0x7C	; 124
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	2c e7       	ldi	r18, 0x7C	; 124
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
	
	// select ADC clock freq (128)
	ADCSRA = ((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0));
 14e:	8a e7       	ldi	r24, 0x7A	; 122
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	27 e0       	ldi	r18, 0x07	; 7
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
	
	// enable ADC	
	ADCSRA |= (1 << ADEN); 
 158:	8a e7       	ldi	r24, 0x7A	; 122
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	2a e7       	ldi	r18, 0x7A	; 122
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	f9 01       	movw	r30, r18
 162:	20 81       	ld	r18, Z
 164:	20 68       	ori	r18, 0x80	; 128
 166:	fc 01       	movw	r30, r24
 168:	20 83       	st	Z, r18
}
 16a:	00 00       	nop
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <read_ADC>:

uint16_t read_ADC(uint8_t channel)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	1f 92       	push	r1
 178:	1f 92       	push	r1
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t adc_readout = 0; // 8bit value holds result
 180:	19 82       	std	Y+1, r1	; 0x01
	
	// starting voltage (Avcc) & 8-bit Left justified
	ADMUX = ((1 << REFS0) | (1 << ADLAR));
 182:	8c e7       	ldi	r24, 0x7C	; 124
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	20 e6       	ldi	r18, 0x60	; 96
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
	
	// select channel
	ADMUX = (ADMUX & 0xE0) | channel;
 18c:	8c e7       	ldi	r24, 0x7C	; 124
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	2c e7       	ldi	r18, 0x7C	; 124
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	f9 01       	movw	r30, r18
 196:	20 81       	ld	r18, Z
 198:	32 2f       	mov	r19, r18
 19a:	30 7e       	andi	r19, 0xE0	; 224
 19c:	2a 81       	ldd	r18, Y+2	; 0x02
 19e:	23 2b       	or	r18, r19
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
	
	// start conversion (ADCSRA)
	ADCSRA |= (1 << ADSC);
 1a4:	8a e7       	ldi	r24, 0x7A	; 122
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	2a e7       	ldi	r18, 0x7A	; 122
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	20 81       	ld	r18, Z
 1b0:	20 64       	ori	r18, 0x40	; 64
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
	
	while((ADCSRA & (1 << ADIF)) == 0)
 1b6:	00 00       	nop
 1b8:	8a e7       	ldi	r24, 0x7A	; 122
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	fc 01       	movw	r30, r24
 1be:	80 81       	ld	r24, Z
 1c0:	88 2f       	mov	r24, r24
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	80 71       	andi	r24, 0x10	; 16
 1c6:	99 27       	eor	r25, r25
 1c8:	89 2b       	or	r24, r25
 1ca:	b1 f3       	breq	.-20     	; 0x1b8 <read_ADC+0x46>
	{
		// wait for conversion to be completed
	}
	
	adc_readout = ADCH; // get upper 8-bits
 1cc:	89 e7       	ldi	r24, 0x79	; 121
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	89 83       	std	Y+1, r24	; 0x01
	
	// clear conversion flag
	ADCSRA |= (1 << ADIF);
 1d6:	8a e7       	ldi	r24, 0x7A	; 122
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	2a e7       	ldi	r18, 0x7A	; 122
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	f9 01       	movw	r30, r18
 1e0:	20 81       	ld	r18, Z
 1e2:	20 61       	ori	r18, 0x10	; 16
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 83       	st	Z, r18
	
	return adc_readout; // send back 8-bit result 
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	88 2f       	mov	r24, r24
 1ec:	90 e0       	ldi	r25, 0x00	; 0
}
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <read_ADC_TENBIT>:

uint16_t read_ADC_TENBIT(uint8_t channel)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <read_ADC_TENBIT+0x6>
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t adc_value; 
	
	ADMUX = ((1 << REFS0));  // turn off ADLAR for 10 bit reading
 204:	8c e7       	ldi	r24, 0x7C	; 124
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	20 e4       	ldi	r18, 0x40	; 64
 20a:	fc 01       	movw	r30, r24
 20c:	20 83       	st	Z, r18
	
	ADMUX = (ADMUX & 0xE0) | channel;
 20e:	8c e7       	ldi	r24, 0x7C	; 124
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	2c e7       	ldi	r18, 0x7C	; 124
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	f9 01       	movw	r30, r18
 218:	20 81       	ld	r18, Z
 21a:	32 2f       	mov	r19, r18
 21c:	30 7e       	andi	r19, 0xE0	; 224
 21e:	2b 81       	ldd	r18, Y+3	; 0x03
 220:	23 2b       	or	r18, r19
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
	
	ADCSRA |= (1 << ADSC);
 226:	8a e7       	ldi	r24, 0x7A	; 122
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	2a e7       	ldi	r18, 0x7A	; 122
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	f9 01       	movw	r30, r18
 230:	20 81       	ld	r18, Z
 232:	20 64       	ori	r18, 0x40	; 64
 234:	fc 01       	movw	r30, r24
 236:	20 83       	st	Z, r18
	
	while((ADCSRA & (1 << ADIF)) == 0)
 238:	00 00       	nop
 23a:	8a e7       	ldi	r24, 0x7A	; 122
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	fc 01       	movw	r30, r24
 240:	80 81       	ld	r24, Z
 242:	88 2f       	mov	r24, r24
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	80 71       	andi	r24, 0x10	; 16
 248:	99 27       	eor	r25, r25
 24a:	89 2b       	or	r24, r25
 24c:	b1 f3       	breq	.-20     	; 0x23a <read_ADC_TENBIT+0x42>
	{
		// wait for conversion to be completed
	}
	
	adc_value = ADCL; // read lower bits
 24e:	88 e7       	ldi	r24, 0x78	; 120
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	fc 01       	movw	r30, r24
 254:	80 81       	ld	r24, Z
 256:	88 2f       	mov	r24, r24
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	9a 83       	std	Y+2, r25	; 0x02
 25c:	89 83       	std	Y+1, r24	; 0x01
	adc_value = (adc_value | (ADCH << 8)); // combine upper and lower bits
 25e:	89 e7       	ldi	r24, 0x79	; 121
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	fc 01       	movw	r30, r24
 264:	80 81       	ld	r24, Z
 266:	88 2f       	mov	r24, r24
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	98 2f       	mov	r25, r24
 26c:	88 27       	eor	r24, r24
 26e:	9c 01       	movw	r18, r24
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	9a 81       	ldd	r25, Y+2	; 0x02
 274:	82 2b       	or	r24, r18
 276:	93 2b       	or	r25, r19
 278:	9a 83       	std	Y+2, r25	; 0x02
 27a:	89 83       	std	Y+1, r24	; 0x01
	
	// clear conversion flag
	ADCSRA |= (1 << ADIF);
 27c:	8a e7       	ldi	r24, 0x7A	; 122
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	2a e7       	ldi	r18, 0x7A	; 122
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	f9 01       	movw	r30, r18
 286:	20 81       	ld	r18, Z
 288:	20 61       	ori	r18, 0x10	; 16
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
	
	return adc_value; // send back 8-bit result
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	9a 81       	ldd	r25, Y+2	; 0x02
	
}
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <init_ports>:

#include <avr/io.h>
#include "init_ports.h"

void init_ports(void)
{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; // set PORTA as inputs
 2a6:	81 e2       	ldi	r24, 0x21	; 33
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	fc 01       	movw	r30, r24
 2ac:	10 82       	st	Z, r1
	PORTA = 0xFF; // turn on PU
 2ae:	82 e2       	ldi	r24, 0x22	; 34
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18
	
	DDRC = 0xFF; // set PORTC as outputs
 2b8:	87 e2       	ldi	r24, 0x27	; 39
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
	PORTC = 0x00; 
 2c2:	88 e2       	ldi	r24, 0x28	; 40
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	fc 01       	movw	r30, r24
 2c8:	10 82       	st	Z, r1
	
	// BONUS !!!
	DDRE = 0xFF; // timer3 OC3A output
 2ca:	8d e2       	ldi	r24, 0x2D	; 45
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	2f ef       	ldi	r18, 0xFF	; 255
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18
	PORTE = 0x00;
 2d4:	8e e2       	ldi	r24, 0x2E	; 46
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	fc 01       	movw	r30, r24
 2da:	10 82       	st	Z, r1

	
	DDRF = 0x00; // set PORTF as inputs
 2dc:	80 e3       	ldi	r24, 0x30	; 48
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	fc 01       	movw	r30, r24
 2e2:	10 82       	st	Z, r1
	PORTF = 0x00; // turn off PU
 2e4:	81 e3       	ldi	r24, 0x31	; 49
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	fc 01       	movw	r30, r24
 2ea:	10 82       	st	Z, r1
	
	DDRG = 0x00; // set PORTG as inputs
 2ec:	83 e3       	ldi	r24, 0x33	; 51
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	fc 01       	movw	r30, r24
 2f2:	10 82       	st	Z, r1
	PORTG = 0xFF; // turn on PU
 2f4:	84 e3       	ldi	r24, 0x34	; 52
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	2f ef       	ldi	r18, 0xFF	; 255
 2fa:	fc 01       	movw	r30, r24
 2fc:	20 83       	st	Z, r18
 2fe:	00 00       	nop
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <init_timer0>:
		TCNT0 = 0; // write this next time
		//TIMER0 is now disabled until next call
		
	}

}
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	86 e4       	ldi	r24, 0x46	; 70
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	fc 01       	movw	r30, r24
 314:	10 82       	st	Z, r1
 316:	84 e4       	ldi	r24, 0x44	; 68
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	fc 01       	movw	r30, r24
 31c:	10 82       	st	Z, r1
 31e:	85 e4       	ldi	r24, 0x45	; 69
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	fc 01       	movw	r30, r24
 324:	10 82       	st	Z, r1
 326:	87 e4       	ldi	r24, 0x47	; 71
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	21 e1       	ldi	r18, 0x11	; 17
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
 330:	00 00       	nop
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <PWM_init>:

// BONUS
void PWM_init(void)
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
	// Instructor said look at MODE 14 from previous IA
	TCCR3A |= ((1 << COM3A0) | (1 << WGM31)); // MODE 14: Fast PWM
 340:	80 e9       	ldi	r24, 0x90	; 144
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	20 e9       	ldi	r18, 0x90	; 144
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	f9 01       	movw	r30, r18
 34a:	20 81       	ld	r18, Z
 34c:	22 64       	ori	r18, 0x42	; 66
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
	
	TCCR3B |= ((1 << WGM33) | (1 << WGM32) | (1 << CS32)); // prescaler 256
 352:	81 e9       	ldi	r24, 0x91	; 145
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	21 e9       	ldi	r18, 0x91	; 145
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	20 81       	ld	r18, Z
 35e:	2c 61       	ori	r18, 0x1C	; 28
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
	
	OCR3A = 1250; // 50 Hz??
 364:	88 e9       	ldi	r24, 0x98	; 152
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	22 ee       	ldi	r18, 0xE2	; 226
 36a:	34 e0       	ldi	r19, 0x04	; 4
 36c:	fc 01       	movw	r30, r24
 36e:	31 83       	std	Z+1, r19	; 0x01
 370:	20 83       	st	Z, r18
}
 372:	00 00       	nop
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <main>:
#include "ADC.h"

void IO_Test(void); // test function for circuit

int main(void)
{
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	00 d0       	rcall	.+0      	; 0x380 <main+0x6>
 380:	00 d0       	rcall	.+0      	; 0x382 <main+0x8>
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
    init_ports(); // initialize ports
 386:	8b df       	rcall	.-234    	; 0x29e <init_ports>
	init_timer0(); // initialize Timer0
 388:	be df       	rcall	.-132    	; 0x306 <init_timer0>
	init_UART(); // initialize UART
 38a:	59 d0       	rcall	.+178    	; 0x43e <init_UART>
	init_ADC(); // initialize ADC
 38c:	cb de       	rcall	.-618    	; 0x124 <init_ADC>
	PWM_init(); // BONUS!!
 38e:	d4 df       	rcall	.-88     	; 0x338 <PWM_init>
 390:	80 e0       	ldi	r24, 0x00	; 0
		while(SW0) // wait till SW0 is released
		{
		}
		*/
		
		uint16_t ADC0_value = read_ADC(0); // read ADC0
 392:	ef de       	rcall	.-546    	; 0x172 <read_ADC>
 394:	9a 83       	std	Y+2, r25	; 0x02
 396:	89 83       	std	Y+1, r24	; 0x01
 398:	81 e0       	ldi	r24, 0x01	; 1
		//PORTC = ADC_value; // will display value between 0 - 255
			
		uint16_t ADC1_value = read_ADC_TENBIT(1); // read ADC1
 39a:	2e df       	rcall	.-420    	; 0x1f8 <read_ADC_TENBIT>
 39c:	9c 83       	std	Y+4, r25	; 0x04
 39e:	8b 83       	std	Y+3, r24	; 0x03
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	2a df       	rcall	.-428    	; 0x1f8 <read_ADC_TENBIT>
		
		uint16_t ADC2_value = read_ADC_TENBIT(2); // read ADC2	
 3a4:	9e 83       	std	Y+6, r25	; 0x06
 3a6:	8d 83       	std	Y+5, r24	; 0x05
 3a8:	8e 81       	ldd	r24, Y+6	; 0x06
 3aa:	8f 93       	push	r24
 3ac:	8d 81       	ldd	r24, Y+5	; 0x05
		
		// print ADC values to Serial Terminal	
		printf("\n ADC0: %d \t ADC1: %d \t ADC2: %d ", ADC0_value, ADC1_value, ADC2_value); 
 3ae:	8f 93       	push	r24
 3b0:	8c 81       	ldd	r24, Y+4	; 0x04
 3b2:	8f 93       	push	r24
 3b4:	8b 81       	ldd	r24, Y+3	; 0x03
 3b6:	8f 93       	push	r24
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	8f 93       	push	r24
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	8f 93       	push	r24
 3c0:	8e e0       	ldi	r24, 0x0E	; 14
 3c2:	92 e0       	ldi	r25, 0x02	; 2
 3c4:	89 2f       	mov	r24, r25
 3c6:	8f 93       	push	r24
 3c8:	8e e0       	ldi	r24, 0x0E	; 14
 3ca:	92 e0       	ldi	r25, 0x02	; 2
 3cc:	8f 93       	push	r24
 3ce:	9e d0       	rcall	.+316    	; 0x50c <printf>
 3d0:	8d b7       	in	r24, 0x3d	; 61
 3d2:	9e b7       	in	r25, 0x3e	; 62
 3d4:	08 96       	adiw	r24, 0x08	; 8
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	cd bf       	out	0x3d, r28	; 61
 3e0:	80 e2       	ldi	r24, 0x20	; 32
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	fc 01       	movw	r30, r24
		//ms_Delay(500); // delay 500 ms
		

//>>>>>>>>>>>>>>>>>>>>>> BONUS (10pt) <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

		switch (PushButtons)
 3e6:	80 81       	ld	r24, Z
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	80 95       	com	r24
 3ee:	90 95       	com	r25
 3f0:	8f 70       	andi	r24, 0x0F	; 15
 3f2:	99 27       	eor	r25, r25
 3f4:	82 30       	cpi	r24, 0x02	; 2
 3f6:	91 05       	cpc	r25, r1
 3f8:	59 f0       	breq	.+22     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3fa:	84 30       	cpi	r24, 0x04	; 4
 3fc:	91 05       	cpc	r25, r1
 3fe:	99 f0       	breq	.+38     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	e1 f4       	brne	.+56     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 404:	88 e2       	ldi	r24, 0x28	; 40
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	29 81       	ldd	r18, Y+1	; 0x01
		{
			case 1:
			//uint8_t ADC0_value = read_ADC(0); // read ADC0
			PORTC = ADC0_value; // will display value between 0 - 255
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
 40e:	16 c0       	rjmp	.+44     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 410:	88 e2       	ldi	r24, 0x28	; 40
 412:	90 e0       	ldi	r25, 0x00	; 0
			break;
 414:	2b 81       	ldd	r18, Y+3	; 0x03
			
			case 2:
			//uint16_t ADC1_value = read_ADC_TENBIT(1); // read ADC1
			PORTC = ADC1_value >> 2; // will display ONLY 8 MSB
 416:	3c 81       	ldd	r19, Y+4	; 0x04
 418:	36 95       	lsr	r19
 41a:	27 95       	ror	r18
 41c:	36 95       	lsr	r19
 41e:	27 95       	ror	r18
 420:	fc 01       	movw	r30, r24
 422:	20 83       	st	Z, r18
 424:	0b c0       	rjmp	.+22     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 426:	88 e2       	ldi	r24, 0x28	; 40
 428:	90 e0       	ldi	r25, 0x00	; 0
			break;
 42a:	2d 81       	ldd	r18, Y+5	; 0x05
			
			case 4: 
			//uint16_t ADC2_value = read_ADC_TENBIT(2); // read ADC2
			PORTC = ADC2_value >> 2; // will display ONLY 8 MSB
 42c:	3e 81       	ldd	r19, Y+6	; 0x06
 42e:	36 95       	lsr	r19
 430:	27 95       	ror	r18
 432:	36 95       	lsr	r19
 434:	27 95       	ror	r18
 436:	fc 01       	movw	r30, r24
 438:	20 83       	st	Z, r18
 43a:	00 00       	nop
 43c:	a9 cf       	rjmp	.-174    	; 0x390 <main+0x16>

0000043e <init_UART>:
 *	IO connections: Tx0, Rx0 through usb port
 */ 
#include "Serial_print.h"

void init_UART(void)
{
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
	UCSR0A = 0x00;		// No clock doubling
 446:	80 ec       	ldi	r24, 0xC0	; 192
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	fc 01       	movw	r30, r24
 44c:	10 82       	st	Z, r1

	//UCSR0A = 0x02;		// Set clock doubler and increase UBRR to 12 to improve baud rate error to 0.2%
	// With no clock doubling and UBRR = 6, the error is -7%, too large and get "stop bit
	// received too soon" error in Cool Term hyper-terminal. Displays odd characters on screen

	UCSR0B = 0x18;		// enable UART RX and TX
 44e:	81 ec       	ldi	r24, 0xC1	; 193
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	28 e1       	ldi	r18, 0x18	; 24
 454:	fc 01       	movw	r30, r24
 456:	20 83       	st	Z, r18
	UCSR0C = 0x06;		// set the UART for N, 8, 1
 458:	82 ec       	ldi	r24, 0xC2	; 194
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	26 e0       	ldi	r18, 0x06	; 6
 45e:	fc 01       	movw	r30, r24
 460:	20 83       	st	Z, r18

	UBRR0L = 103;		// set BAUD Rate for 9600 with 1MHz clock (no clock doubler)
 462:	84 ec       	ldi	r24, 0xC4	; 196
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	27 e6       	ldi	r18, 0x67	; 103
 468:	fc 01       	movw	r30, r24
 46a:	20 83       	st	Z, r18

	//UBRR0L = 12;		// set BAUD Rate for 9600 with 2MHz clock (clock doubler bit is set)
	UBRR0H = 0;
 46c:	85 ec       	ldi	r24, 0xC5	; 197
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	fc 01       	movw	r30, r24
 472:	10 82       	st	Z, r1

	stdout = &mystdout;	// define the output stream
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	92 e0       	ldi	r25, 0x02	; 2
 478:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <__data_end+0x3>
 47c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end+0x2>
	stdin = &mystdout;	// define the input stream
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	92 e0       	ldi	r25, 0x02	; 2
 484:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <__data_end+0x1>
 488:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__data_end>

}
 48c:	00 00       	nop
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <uart_putchar>:


// the following function sends a single character out of the serial port
 static int uart_putchar(char ch, FILE *stream)
{
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	00 d0       	rcall	.+0      	; 0x49a <uart_putchar+0x6>
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
 49e:	89 83       	std	Y+1, r24	; 0x01
 4a0:	7b 83       	std	Y+3, r23	; 0x03
 4a2:	6a 83       	std	Y+2, r22	; 0x02

	while ( (UCSR0A & (1 << UDRE0)) == 0 ) // wait until there is room in the transmit buffer
 4a4:	00 00       	nop
 4a6:	80 ec       	ldi	r24, 0xC0	; 192
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	fc 01       	movw	r30, r24
 4ac:	80 81       	ld	r24, Z
 4ae:	88 2f       	mov	r24, r24
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	80 72       	andi	r24, 0x20	; 32
 4b4:	99 27       	eor	r25, r25
 4b6:	89 2b       	or	r24, r25
 4b8:	b1 f3       	breq	.-20     	; 0x4a6 <uart_putchar+0x12>
	{
	}

	UDR0 = ch; // load the character into the UART data register
 4ba:	86 ec       	ldi	r24, 0xC6	; 198
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	29 81       	ldd	r18, Y+1	; 0x01
 4c0:	fc 01       	movw	r30, r24
 4c2:	20 83       	st	Z, r18

	return 0;
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	90 e0       	ldi	r25, 0x00	; 0
}
 4c8:	0f 90       	pop	r0
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <uart_getch>:

// the following function waits for a serial character to be received
 static int uart_getch(FILE *stream)
{
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	00 d0       	rcall	.+0      	; 0x4da <uart_getch+0x6>
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
 4de:	9b 83       	std	Y+3, r25	; 0x03
 4e0:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char ch;   	// create a variable to hold the received value

	while ( (UCSR0A & (1<<RXC0)) == 0 )	// wait until the received character flag is set
 4e2:	00 00       	nop
 4e4:	80 ec       	ldi	r24, 0xC0	; 192
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	fc 01       	movw	r30, r24
 4ea:	80 81       	ld	r24, Z
 4ec:	88 23       	and	r24, r24
 4ee:	d4 f7       	brge	.-12     	; 0x4e4 <uart_getch+0x10>
	{
	}

	ch=UDR0; // load the received character into the local variable
 4f0:	86 ec       	ldi	r24, 0xC6	; 198
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	fc 01       	movw	r30, r24
 4f6:	80 81       	ld	r24, Z
 4f8:	89 83       	std	Y+1, r24	; 0x01

	return ch; // return the received value (ASCII)
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
 4fc:	88 2f       	mov	r24, r24
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	0f 90       	pop	r0
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <printf>:
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
 514:	ae 01       	movw	r20, r28
 516:	4a 5f       	subi	r20, 0xFA	; 250
 518:	5f 4f       	sbci	r21, 0xFF	; 255
 51a:	fa 01       	movw	r30, r20
 51c:	61 91       	ld	r22, Z+
 51e:	71 91       	ld	r23, Z+
 520:	af 01       	movw	r20, r30
 522:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end+0x2>
 526:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <__data_end+0x3>
 52a:	03 d0       	rcall	.+6      	; 0x532 <vfprintf>
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <vfprintf>:
 532:	2f 92       	push	r2
 534:	3f 92       	push	r3
 536:	4f 92       	push	r4
 538:	5f 92       	push	r5
 53a:	6f 92       	push	r6
 53c:	7f 92       	push	r7
 53e:	8f 92       	push	r8
 540:	9f 92       	push	r9
 542:	af 92       	push	r10
 544:	bf 92       	push	r11
 546:	cf 92       	push	r12
 548:	df 92       	push	r13
 54a:	ef 92       	push	r14
 54c:	ff 92       	push	r15
 54e:	0f 93       	push	r16
 550:	1f 93       	push	r17
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
 55a:	2b 97       	sbiw	r28, 0x0b	; 11
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	f8 94       	cli
 560:	de bf       	out	0x3e, r29	; 62
 562:	0f be       	out	0x3f, r0	; 63
 564:	cd bf       	out	0x3d, r28	; 61
 566:	6c 01       	movw	r12, r24
 568:	7b 01       	movw	r14, r22
 56a:	8a 01       	movw	r16, r20
 56c:	fc 01       	movw	r30, r24
 56e:	17 82       	std	Z+7, r1	; 0x07
 570:	16 82       	std	Z+6, r1	; 0x06
 572:	83 81       	ldd	r24, Z+3	; 0x03
 574:	81 ff       	sbrs	r24, 1
 576:	bf c1       	rjmp	.+894    	; 0x8f6 <vfprintf+0x3c4>
 578:	ce 01       	movw	r24, r28
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	3c 01       	movw	r6, r24
 57e:	f6 01       	movw	r30, r12
 580:	93 81       	ldd	r25, Z+3	; 0x03
 582:	f7 01       	movw	r30, r14
 584:	93 fd       	sbrc	r25, 3
 586:	85 91       	lpm	r24, Z+
 588:	93 ff       	sbrs	r25, 3
 58a:	81 91       	ld	r24, Z+
 58c:	7f 01       	movw	r14, r30
 58e:	88 23       	and	r24, r24
 590:	09 f4       	brne	.+2      	; 0x594 <vfprintf+0x62>
 592:	ad c1       	rjmp	.+858    	; 0x8ee <vfprintf+0x3bc>
 594:	85 32       	cpi	r24, 0x25	; 37
 596:	39 f4       	brne	.+14     	; 0x5a6 <vfprintf+0x74>
 598:	93 fd       	sbrc	r25, 3
 59a:	85 91       	lpm	r24, Z+
 59c:	93 ff       	sbrs	r25, 3
 59e:	81 91       	ld	r24, Z+
 5a0:	7f 01       	movw	r14, r30
 5a2:	85 32       	cpi	r24, 0x25	; 37
 5a4:	21 f4       	brne	.+8      	; 0x5ae <vfprintf+0x7c>
 5a6:	b6 01       	movw	r22, r12
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	d6 d1       	rcall	.+940    	; 0x958 <fputc>
 5ac:	e8 cf       	rjmp	.-48     	; 0x57e <vfprintf+0x4c>
 5ae:	91 2c       	mov	r9, r1
 5b0:	21 2c       	mov	r2, r1
 5b2:	31 2c       	mov	r3, r1
 5b4:	ff e1       	ldi	r31, 0x1F	; 31
 5b6:	f3 15       	cp	r31, r3
 5b8:	d8 f0       	brcs	.+54     	; 0x5f0 <vfprintf+0xbe>
 5ba:	8b 32       	cpi	r24, 0x2B	; 43
 5bc:	79 f0       	breq	.+30     	; 0x5dc <vfprintf+0xaa>
 5be:	38 f4       	brcc	.+14     	; 0x5ce <vfprintf+0x9c>
 5c0:	80 32       	cpi	r24, 0x20	; 32
 5c2:	79 f0       	breq	.+30     	; 0x5e2 <vfprintf+0xb0>
 5c4:	83 32       	cpi	r24, 0x23	; 35
 5c6:	a1 f4       	brne	.+40     	; 0x5f0 <vfprintf+0xbe>
 5c8:	23 2d       	mov	r18, r3
 5ca:	20 61       	ori	r18, 0x10	; 16
 5cc:	1d c0       	rjmp	.+58     	; 0x608 <vfprintf+0xd6>
 5ce:	8d 32       	cpi	r24, 0x2D	; 45
 5d0:	61 f0       	breq	.+24     	; 0x5ea <vfprintf+0xb8>
 5d2:	80 33       	cpi	r24, 0x30	; 48
 5d4:	69 f4       	brne	.+26     	; 0x5f0 <vfprintf+0xbe>
 5d6:	23 2d       	mov	r18, r3
 5d8:	21 60       	ori	r18, 0x01	; 1
 5da:	16 c0       	rjmp	.+44     	; 0x608 <vfprintf+0xd6>
 5dc:	83 2d       	mov	r24, r3
 5de:	82 60       	ori	r24, 0x02	; 2
 5e0:	38 2e       	mov	r3, r24
 5e2:	e3 2d       	mov	r30, r3
 5e4:	e4 60       	ori	r30, 0x04	; 4
 5e6:	3e 2e       	mov	r3, r30
 5e8:	2a c0       	rjmp	.+84     	; 0x63e <vfprintf+0x10c>
 5ea:	f3 2d       	mov	r31, r3
 5ec:	f8 60       	ori	r31, 0x08	; 8
 5ee:	1d c0       	rjmp	.+58     	; 0x62a <vfprintf+0xf8>
 5f0:	37 fc       	sbrc	r3, 7
 5f2:	2d c0       	rjmp	.+90     	; 0x64e <vfprintf+0x11c>
 5f4:	20 ed       	ldi	r18, 0xD0	; 208
 5f6:	28 0f       	add	r18, r24
 5f8:	2a 30       	cpi	r18, 0x0A	; 10
 5fa:	40 f0       	brcs	.+16     	; 0x60c <vfprintf+0xda>
 5fc:	8e 32       	cpi	r24, 0x2E	; 46
 5fe:	b9 f4       	brne	.+46     	; 0x62e <vfprintf+0xfc>
 600:	36 fc       	sbrc	r3, 6
 602:	75 c1       	rjmp	.+746    	; 0x8ee <vfprintf+0x3bc>
 604:	23 2d       	mov	r18, r3
 606:	20 64       	ori	r18, 0x40	; 64
 608:	32 2e       	mov	r3, r18
 60a:	19 c0       	rjmp	.+50     	; 0x63e <vfprintf+0x10c>
 60c:	36 fe       	sbrs	r3, 6
 60e:	06 c0       	rjmp	.+12     	; 0x61c <vfprintf+0xea>
 610:	8a e0       	ldi	r24, 0x0A	; 10
 612:	98 9e       	mul	r9, r24
 614:	20 0d       	add	r18, r0
 616:	11 24       	eor	r1, r1
 618:	92 2e       	mov	r9, r18
 61a:	11 c0       	rjmp	.+34     	; 0x63e <vfprintf+0x10c>
 61c:	ea e0       	ldi	r30, 0x0A	; 10
 61e:	2e 9e       	mul	r2, r30
 620:	20 0d       	add	r18, r0
 622:	11 24       	eor	r1, r1
 624:	22 2e       	mov	r2, r18
 626:	f3 2d       	mov	r31, r3
 628:	f0 62       	ori	r31, 0x20	; 32
 62a:	3f 2e       	mov	r3, r31
 62c:	08 c0       	rjmp	.+16     	; 0x63e <vfprintf+0x10c>
 62e:	8c 36       	cpi	r24, 0x6C	; 108
 630:	21 f4       	brne	.+8      	; 0x63a <vfprintf+0x108>
 632:	83 2d       	mov	r24, r3
 634:	80 68       	ori	r24, 0x80	; 128
 636:	38 2e       	mov	r3, r24
 638:	02 c0       	rjmp	.+4      	; 0x63e <vfprintf+0x10c>
 63a:	88 36       	cpi	r24, 0x68	; 104
 63c:	41 f4       	brne	.+16     	; 0x64e <vfprintf+0x11c>
 63e:	f7 01       	movw	r30, r14
 640:	93 fd       	sbrc	r25, 3
 642:	85 91       	lpm	r24, Z+
 644:	93 ff       	sbrs	r25, 3
 646:	81 91       	ld	r24, Z+
 648:	7f 01       	movw	r14, r30
 64a:	81 11       	cpse	r24, r1
 64c:	b3 cf       	rjmp	.-154    	; 0x5b4 <vfprintf+0x82>
 64e:	98 2f       	mov	r25, r24
 650:	9f 7d       	andi	r25, 0xDF	; 223
 652:	95 54       	subi	r25, 0x45	; 69
 654:	93 30       	cpi	r25, 0x03	; 3
 656:	28 f4       	brcc	.+10     	; 0x662 <vfprintf+0x130>
 658:	0c 5f       	subi	r16, 0xFC	; 252
 65a:	1f 4f       	sbci	r17, 0xFF	; 255
 65c:	9f e3       	ldi	r25, 0x3F	; 63
 65e:	99 83       	std	Y+1, r25	; 0x01
 660:	0d c0       	rjmp	.+26     	; 0x67c <vfprintf+0x14a>
 662:	83 36       	cpi	r24, 0x63	; 99
 664:	31 f0       	breq	.+12     	; 0x672 <vfprintf+0x140>
 666:	83 37       	cpi	r24, 0x73	; 115
 668:	71 f0       	breq	.+28     	; 0x686 <vfprintf+0x154>
 66a:	83 35       	cpi	r24, 0x53	; 83
 66c:	09 f0       	breq	.+2      	; 0x670 <vfprintf+0x13e>
 66e:	55 c0       	rjmp	.+170    	; 0x71a <vfprintf+0x1e8>
 670:	20 c0       	rjmp	.+64     	; 0x6b2 <vfprintf+0x180>
 672:	f8 01       	movw	r30, r16
 674:	80 81       	ld	r24, Z
 676:	89 83       	std	Y+1, r24	; 0x01
 678:	0e 5f       	subi	r16, 0xFE	; 254
 67a:	1f 4f       	sbci	r17, 0xFF	; 255
 67c:	88 24       	eor	r8, r8
 67e:	83 94       	inc	r8
 680:	91 2c       	mov	r9, r1
 682:	53 01       	movw	r10, r6
 684:	12 c0       	rjmp	.+36     	; 0x6aa <vfprintf+0x178>
 686:	28 01       	movw	r4, r16
 688:	f2 e0       	ldi	r31, 0x02	; 2
 68a:	4f 0e       	add	r4, r31
 68c:	51 1c       	adc	r5, r1
 68e:	f8 01       	movw	r30, r16
 690:	a0 80       	ld	r10, Z
 692:	b1 80       	ldd	r11, Z+1	; 0x01
 694:	36 fe       	sbrs	r3, 6
 696:	03 c0       	rjmp	.+6      	; 0x69e <vfprintf+0x16c>
 698:	69 2d       	mov	r22, r9
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <vfprintf+0x170>
 69e:	6f ef       	ldi	r22, 0xFF	; 255
 6a0:	7f ef       	ldi	r23, 0xFF	; 255
 6a2:	c5 01       	movw	r24, r10
 6a4:	4e d1       	rcall	.+668    	; 0x942 <strnlen>
 6a6:	4c 01       	movw	r8, r24
 6a8:	82 01       	movw	r16, r4
 6aa:	f3 2d       	mov	r31, r3
 6ac:	ff 77       	andi	r31, 0x7F	; 127
 6ae:	3f 2e       	mov	r3, r31
 6b0:	15 c0       	rjmp	.+42     	; 0x6dc <vfprintf+0x1aa>
 6b2:	28 01       	movw	r4, r16
 6b4:	22 e0       	ldi	r18, 0x02	; 2
 6b6:	42 0e       	add	r4, r18
 6b8:	51 1c       	adc	r5, r1
 6ba:	f8 01       	movw	r30, r16
 6bc:	a0 80       	ld	r10, Z
 6be:	b1 80       	ldd	r11, Z+1	; 0x01
 6c0:	36 fe       	sbrs	r3, 6
 6c2:	03 c0       	rjmp	.+6      	; 0x6ca <vfprintf+0x198>
 6c4:	69 2d       	mov	r22, r9
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <vfprintf+0x19c>
 6ca:	6f ef       	ldi	r22, 0xFF	; 255
 6cc:	7f ef       	ldi	r23, 0xFF	; 255
 6ce:	c5 01       	movw	r24, r10
 6d0:	2d d1       	rcall	.+602    	; 0x92c <strnlen_P>
 6d2:	4c 01       	movw	r8, r24
 6d4:	f3 2d       	mov	r31, r3
 6d6:	f0 68       	ori	r31, 0x80	; 128
 6d8:	3f 2e       	mov	r3, r31
 6da:	82 01       	movw	r16, r4
 6dc:	33 fc       	sbrc	r3, 3
 6de:	19 c0       	rjmp	.+50     	; 0x712 <vfprintf+0x1e0>
 6e0:	82 2d       	mov	r24, r2
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	88 16       	cp	r8, r24
 6e6:	99 06       	cpc	r9, r25
 6e8:	a0 f4       	brcc	.+40     	; 0x712 <vfprintf+0x1e0>
 6ea:	b6 01       	movw	r22, r12
 6ec:	80 e2       	ldi	r24, 0x20	; 32
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	33 d1       	rcall	.+614    	; 0x958 <fputc>
 6f2:	2a 94       	dec	r2
 6f4:	f5 cf       	rjmp	.-22     	; 0x6e0 <vfprintf+0x1ae>
 6f6:	f5 01       	movw	r30, r10
 6f8:	37 fc       	sbrc	r3, 7
 6fa:	85 91       	lpm	r24, Z+
 6fc:	37 fe       	sbrs	r3, 7
 6fe:	81 91       	ld	r24, Z+
 700:	5f 01       	movw	r10, r30
 702:	b6 01       	movw	r22, r12
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	28 d1       	rcall	.+592    	; 0x958 <fputc>
 708:	21 10       	cpse	r2, r1
 70a:	2a 94       	dec	r2
 70c:	21 e0       	ldi	r18, 0x01	; 1
 70e:	82 1a       	sub	r8, r18
 710:	91 08       	sbc	r9, r1
 712:	81 14       	cp	r8, r1
 714:	91 04       	cpc	r9, r1
 716:	79 f7       	brne	.-34     	; 0x6f6 <vfprintf+0x1c4>
 718:	e1 c0       	rjmp	.+450    	; 0x8dc <vfprintf+0x3aa>
 71a:	84 36       	cpi	r24, 0x64	; 100
 71c:	11 f0       	breq	.+4      	; 0x722 <vfprintf+0x1f0>
 71e:	89 36       	cpi	r24, 0x69	; 105
 720:	39 f5       	brne	.+78     	; 0x770 <vfprintf+0x23e>
 722:	f8 01       	movw	r30, r16
 724:	37 fe       	sbrs	r3, 7
 726:	07 c0       	rjmp	.+14     	; 0x736 <vfprintf+0x204>
 728:	60 81       	ld	r22, Z
 72a:	71 81       	ldd	r23, Z+1	; 0x01
 72c:	82 81       	ldd	r24, Z+2	; 0x02
 72e:	93 81       	ldd	r25, Z+3	; 0x03
 730:	0c 5f       	subi	r16, 0xFC	; 252
 732:	1f 4f       	sbci	r17, 0xFF	; 255
 734:	08 c0       	rjmp	.+16     	; 0x746 <vfprintf+0x214>
 736:	60 81       	ld	r22, Z
 738:	71 81       	ldd	r23, Z+1	; 0x01
 73a:	07 2e       	mov	r0, r23
 73c:	00 0c       	add	r0, r0
 73e:	88 0b       	sbc	r24, r24
 740:	99 0b       	sbc	r25, r25
 742:	0e 5f       	subi	r16, 0xFE	; 254
 744:	1f 4f       	sbci	r17, 0xFF	; 255
 746:	f3 2d       	mov	r31, r3
 748:	ff 76       	andi	r31, 0x6F	; 111
 74a:	3f 2e       	mov	r3, r31
 74c:	97 ff       	sbrs	r25, 7
 74e:	09 c0       	rjmp	.+18     	; 0x762 <vfprintf+0x230>
 750:	90 95       	com	r25
 752:	80 95       	com	r24
 754:	70 95       	com	r23
 756:	61 95       	neg	r22
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	f0 68       	ori	r31, 0x80	; 128
 760:	3f 2e       	mov	r3, r31
 762:	2a e0       	ldi	r18, 0x0A	; 10
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	a3 01       	movw	r20, r6
 768:	33 d1       	rcall	.+614    	; 0x9d0 <__ultoa_invert>
 76a:	88 2e       	mov	r8, r24
 76c:	86 18       	sub	r8, r6
 76e:	44 c0       	rjmp	.+136    	; 0x7f8 <vfprintf+0x2c6>
 770:	85 37       	cpi	r24, 0x75	; 117
 772:	31 f4       	brne	.+12     	; 0x780 <vfprintf+0x24e>
 774:	23 2d       	mov	r18, r3
 776:	2f 7e       	andi	r18, 0xEF	; 239
 778:	b2 2e       	mov	r11, r18
 77a:	2a e0       	ldi	r18, 0x0A	; 10
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	25 c0       	rjmp	.+74     	; 0x7ca <vfprintf+0x298>
 780:	93 2d       	mov	r25, r3
 782:	99 7f       	andi	r25, 0xF9	; 249
 784:	b9 2e       	mov	r11, r25
 786:	8f 36       	cpi	r24, 0x6F	; 111
 788:	c1 f0       	breq	.+48     	; 0x7ba <vfprintf+0x288>
 78a:	18 f4       	brcc	.+6      	; 0x792 <vfprintf+0x260>
 78c:	88 35       	cpi	r24, 0x58	; 88
 78e:	79 f0       	breq	.+30     	; 0x7ae <vfprintf+0x27c>
 790:	ae c0       	rjmp	.+348    	; 0x8ee <vfprintf+0x3bc>
 792:	80 37       	cpi	r24, 0x70	; 112
 794:	19 f0       	breq	.+6      	; 0x79c <vfprintf+0x26a>
 796:	88 37       	cpi	r24, 0x78	; 120
 798:	21 f0       	breq	.+8      	; 0x7a2 <vfprintf+0x270>
 79a:	a9 c0       	rjmp	.+338    	; 0x8ee <vfprintf+0x3bc>
 79c:	e9 2f       	mov	r30, r25
 79e:	e0 61       	ori	r30, 0x10	; 16
 7a0:	be 2e       	mov	r11, r30
 7a2:	b4 fe       	sbrs	r11, 4
 7a4:	0d c0       	rjmp	.+26     	; 0x7c0 <vfprintf+0x28e>
 7a6:	fb 2d       	mov	r31, r11
 7a8:	f4 60       	ori	r31, 0x04	; 4
 7aa:	bf 2e       	mov	r11, r31
 7ac:	09 c0       	rjmp	.+18     	; 0x7c0 <vfprintf+0x28e>
 7ae:	34 fe       	sbrs	r3, 4
 7b0:	0a c0       	rjmp	.+20     	; 0x7c6 <vfprintf+0x294>
 7b2:	29 2f       	mov	r18, r25
 7b4:	26 60       	ori	r18, 0x06	; 6
 7b6:	b2 2e       	mov	r11, r18
 7b8:	06 c0       	rjmp	.+12     	; 0x7c6 <vfprintf+0x294>
 7ba:	28 e0       	ldi	r18, 0x08	; 8
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	05 c0       	rjmp	.+10     	; 0x7ca <vfprintf+0x298>
 7c0:	20 e1       	ldi	r18, 0x10	; 16
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <vfprintf+0x298>
 7c6:	20 e1       	ldi	r18, 0x10	; 16
 7c8:	32 e0       	ldi	r19, 0x02	; 2
 7ca:	f8 01       	movw	r30, r16
 7cc:	b7 fe       	sbrs	r11, 7
 7ce:	07 c0       	rjmp	.+14     	; 0x7de <vfprintf+0x2ac>
 7d0:	60 81       	ld	r22, Z
 7d2:	71 81       	ldd	r23, Z+1	; 0x01
 7d4:	82 81       	ldd	r24, Z+2	; 0x02
 7d6:	93 81       	ldd	r25, Z+3	; 0x03
 7d8:	0c 5f       	subi	r16, 0xFC	; 252
 7da:	1f 4f       	sbci	r17, 0xFF	; 255
 7dc:	06 c0       	rjmp	.+12     	; 0x7ea <vfprintf+0x2b8>
 7de:	60 81       	ld	r22, Z
 7e0:	71 81       	ldd	r23, Z+1	; 0x01
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 5f       	subi	r16, 0xFE	; 254
 7e8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ea:	a3 01       	movw	r20, r6
 7ec:	f1 d0       	rcall	.+482    	; 0x9d0 <__ultoa_invert>
 7ee:	88 2e       	mov	r8, r24
 7f0:	86 18       	sub	r8, r6
 7f2:	fb 2d       	mov	r31, r11
 7f4:	ff 77       	andi	r31, 0x7F	; 127
 7f6:	3f 2e       	mov	r3, r31
 7f8:	36 fe       	sbrs	r3, 6
 7fa:	0d c0       	rjmp	.+26     	; 0x816 <vfprintf+0x2e4>
 7fc:	23 2d       	mov	r18, r3
 7fe:	2e 7f       	andi	r18, 0xFE	; 254
 800:	a2 2e       	mov	r10, r18
 802:	89 14       	cp	r8, r9
 804:	58 f4       	brcc	.+22     	; 0x81c <vfprintf+0x2ea>
 806:	34 fe       	sbrs	r3, 4
 808:	0b c0       	rjmp	.+22     	; 0x820 <vfprintf+0x2ee>
 80a:	32 fc       	sbrc	r3, 2
 80c:	09 c0       	rjmp	.+18     	; 0x820 <vfprintf+0x2ee>
 80e:	83 2d       	mov	r24, r3
 810:	8e 7e       	andi	r24, 0xEE	; 238
 812:	a8 2e       	mov	r10, r24
 814:	05 c0       	rjmp	.+10     	; 0x820 <vfprintf+0x2ee>
 816:	b8 2c       	mov	r11, r8
 818:	a3 2c       	mov	r10, r3
 81a:	03 c0       	rjmp	.+6      	; 0x822 <vfprintf+0x2f0>
 81c:	b8 2c       	mov	r11, r8
 81e:	01 c0       	rjmp	.+2      	; 0x822 <vfprintf+0x2f0>
 820:	b9 2c       	mov	r11, r9
 822:	a4 fe       	sbrs	r10, 4
 824:	0f c0       	rjmp	.+30     	; 0x844 <vfprintf+0x312>
 826:	fe 01       	movw	r30, r28
 828:	e8 0d       	add	r30, r8
 82a:	f1 1d       	adc	r31, r1
 82c:	80 81       	ld	r24, Z
 82e:	80 33       	cpi	r24, 0x30	; 48
 830:	21 f4       	brne	.+8      	; 0x83a <vfprintf+0x308>
 832:	9a 2d       	mov	r25, r10
 834:	99 7e       	andi	r25, 0xE9	; 233
 836:	a9 2e       	mov	r10, r25
 838:	09 c0       	rjmp	.+18     	; 0x84c <vfprintf+0x31a>
 83a:	a2 fe       	sbrs	r10, 2
 83c:	06 c0       	rjmp	.+12     	; 0x84a <vfprintf+0x318>
 83e:	b3 94       	inc	r11
 840:	b3 94       	inc	r11
 842:	04 c0       	rjmp	.+8      	; 0x84c <vfprintf+0x31a>
 844:	8a 2d       	mov	r24, r10
 846:	86 78       	andi	r24, 0x86	; 134
 848:	09 f0       	breq	.+2      	; 0x84c <vfprintf+0x31a>
 84a:	b3 94       	inc	r11
 84c:	a3 fc       	sbrc	r10, 3
 84e:	10 c0       	rjmp	.+32     	; 0x870 <vfprintf+0x33e>
 850:	a0 fe       	sbrs	r10, 0
 852:	06 c0       	rjmp	.+12     	; 0x860 <vfprintf+0x32e>
 854:	b2 14       	cp	r11, r2
 856:	80 f4       	brcc	.+32     	; 0x878 <vfprintf+0x346>
 858:	28 0c       	add	r2, r8
 85a:	92 2c       	mov	r9, r2
 85c:	9b 18       	sub	r9, r11
 85e:	0d c0       	rjmp	.+26     	; 0x87a <vfprintf+0x348>
 860:	b2 14       	cp	r11, r2
 862:	58 f4       	brcc	.+22     	; 0x87a <vfprintf+0x348>
 864:	b6 01       	movw	r22, r12
 866:	80 e2       	ldi	r24, 0x20	; 32
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	76 d0       	rcall	.+236    	; 0x958 <fputc>
 86c:	b3 94       	inc	r11
 86e:	f8 cf       	rjmp	.-16     	; 0x860 <vfprintf+0x32e>
 870:	b2 14       	cp	r11, r2
 872:	18 f4       	brcc	.+6      	; 0x87a <vfprintf+0x348>
 874:	2b 18       	sub	r2, r11
 876:	02 c0       	rjmp	.+4      	; 0x87c <vfprintf+0x34a>
 878:	98 2c       	mov	r9, r8
 87a:	21 2c       	mov	r2, r1
 87c:	a4 fe       	sbrs	r10, 4
 87e:	0f c0       	rjmp	.+30     	; 0x89e <vfprintf+0x36c>
 880:	b6 01       	movw	r22, r12
 882:	80 e3       	ldi	r24, 0x30	; 48
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	68 d0       	rcall	.+208    	; 0x958 <fputc>
 888:	a2 fe       	sbrs	r10, 2
 88a:	16 c0       	rjmp	.+44     	; 0x8b8 <vfprintf+0x386>
 88c:	a1 fc       	sbrc	r10, 1
 88e:	03 c0       	rjmp	.+6      	; 0x896 <vfprintf+0x364>
 890:	88 e7       	ldi	r24, 0x78	; 120
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	02 c0       	rjmp	.+4      	; 0x89a <vfprintf+0x368>
 896:	88 e5       	ldi	r24, 0x58	; 88
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	b6 01       	movw	r22, r12
 89c:	0c c0       	rjmp	.+24     	; 0x8b6 <vfprintf+0x384>
 89e:	8a 2d       	mov	r24, r10
 8a0:	86 78       	andi	r24, 0x86	; 134
 8a2:	51 f0       	breq	.+20     	; 0x8b8 <vfprintf+0x386>
 8a4:	a1 fe       	sbrs	r10, 1
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <vfprintf+0x37a>
 8a8:	8b e2       	ldi	r24, 0x2B	; 43
 8aa:	01 c0       	rjmp	.+2      	; 0x8ae <vfprintf+0x37c>
 8ac:	80 e2       	ldi	r24, 0x20	; 32
 8ae:	a7 fc       	sbrc	r10, 7
 8b0:	8d e2       	ldi	r24, 0x2D	; 45
 8b2:	b6 01       	movw	r22, r12
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	50 d0       	rcall	.+160    	; 0x958 <fputc>
 8b8:	89 14       	cp	r8, r9
 8ba:	30 f4       	brcc	.+12     	; 0x8c8 <vfprintf+0x396>
 8bc:	b6 01       	movw	r22, r12
 8be:	80 e3       	ldi	r24, 0x30	; 48
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	4a d0       	rcall	.+148    	; 0x958 <fputc>
 8c4:	9a 94       	dec	r9
 8c6:	f8 cf       	rjmp	.-16     	; 0x8b8 <vfprintf+0x386>
 8c8:	8a 94       	dec	r8
 8ca:	f3 01       	movw	r30, r6
 8cc:	e8 0d       	add	r30, r8
 8ce:	f1 1d       	adc	r31, r1
 8d0:	80 81       	ld	r24, Z
 8d2:	b6 01       	movw	r22, r12
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	40 d0       	rcall	.+128    	; 0x958 <fputc>
 8d8:	81 10       	cpse	r8, r1
 8da:	f6 cf       	rjmp	.-20     	; 0x8c8 <vfprintf+0x396>
 8dc:	22 20       	and	r2, r2
 8de:	09 f4       	brne	.+2      	; 0x8e2 <vfprintf+0x3b0>
 8e0:	4e ce       	rjmp	.-868    	; 0x57e <vfprintf+0x4c>
 8e2:	b6 01       	movw	r22, r12
 8e4:	80 e2       	ldi	r24, 0x20	; 32
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	37 d0       	rcall	.+110    	; 0x958 <fputc>
 8ea:	2a 94       	dec	r2
 8ec:	f7 cf       	rjmp	.-18     	; 0x8dc <vfprintf+0x3aa>
 8ee:	f6 01       	movw	r30, r12
 8f0:	86 81       	ldd	r24, Z+6	; 0x06
 8f2:	97 81       	ldd	r25, Z+7	; 0x07
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <vfprintf+0x3c8>
 8f6:	8f ef       	ldi	r24, 0xFF	; 255
 8f8:	9f ef       	ldi	r25, 0xFF	; 255
 8fa:	2b 96       	adiw	r28, 0x0b	; 11
 8fc:	0f b6       	in	r0, 0x3f	; 63
 8fe:	f8 94       	cli
 900:	de bf       	out	0x3e, r29	; 62
 902:	0f be       	out	0x3f, r0	; 63
 904:	cd bf       	out	0x3d, r28	; 61
 906:	df 91       	pop	r29
 908:	cf 91       	pop	r28
 90a:	1f 91       	pop	r17
 90c:	0f 91       	pop	r16
 90e:	ff 90       	pop	r15
 910:	ef 90       	pop	r14
 912:	df 90       	pop	r13
 914:	cf 90       	pop	r12
 916:	bf 90       	pop	r11
 918:	af 90       	pop	r10
 91a:	9f 90       	pop	r9
 91c:	8f 90       	pop	r8
 91e:	7f 90       	pop	r7
 920:	6f 90       	pop	r6
 922:	5f 90       	pop	r5
 924:	4f 90       	pop	r4
 926:	3f 90       	pop	r3
 928:	2f 90       	pop	r2
 92a:	08 95       	ret

0000092c <strnlen_P>:
 92c:	fc 01       	movw	r30, r24
 92e:	05 90       	lpm	r0, Z+
 930:	61 50       	subi	r22, 0x01	; 1
 932:	70 40       	sbci	r23, 0x00	; 0
 934:	01 10       	cpse	r0, r1
 936:	d8 f7       	brcc	.-10     	; 0x92e <strnlen_P+0x2>
 938:	80 95       	com	r24
 93a:	90 95       	com	r25
 93c:	8e 0f       	add	r24, r30
 93e:	9f 1f       	adc	r25, r31
 940:	08 95       	ret

00000942 <strnlen>:
 942:	fc 01       	movw	r30, r24
 944:	61 50       	subi	r22, 0x01	; 1
 946:	70 40       	sbci	r23, 0x00	; 0
 948:	01 90       	ld	r0, Z+
 94a:	01 10       	cpse	r0, r1
 94c:	d8 f7       	brcc	.-10     	; 0x944 <strnlen+0x2>
 94e:	80 95       	com	r24
 950:	90 95       	com	r25
 952:	8e 0f       	add	r24, r30
 954:	9f 1f       	adc	r25, r31
 956:	08 95       	ret

00000958 <fputc>:
 958:	0f 93       	push	r16
 95a:	1f 93       	push	r17
 95c:	cf 93       	push	r28
 95e:	df 93       	push	r29
 960:	fb 01       	movw	r30, r22
 962:	23 81       	ldd	r18, Z+3	; 0x03
 964:	21 fd       	sbrc	r18, 1
 966:	03 c0       	rjmp	.+6      	; 0x96e <fputc+0x16>
 968:	8f ef       	ldi	r24, 0xFF	; 255
 96a:	9f ef       	ldi	r25, 0xFF	; 255
 96c:	2c c0       	rjmp	.+88     	; 0x9c6 <fputc+0x6e>
 96e:	22 ff       	sbrs	r18, 2
 970:	16 c0       	rjmp	.+44     	; 0x99e <fputc+0x46>
 972:	46 81       	ldd	r20, Z+6	; 0x06
 974:	57 81       	ldd	r21, Z+7	; 0x07
 976:	24 81       	ldd	r18, Z+4	; 0x04
 978:	35 81       	ldd	r19, Z+5	; 0x05
 97a:	42 17       	cp	r20, r18
 97c:	53 07       	cpc	r21, r19
 97e:	44 f4       	brge	.+16     	; 0x990 <fputc+0x38>
 980:	a0 81       	ld	r26, Z
 982:	b1 81       	ldd	r27, Z+1	; 0x01
 984:	9d 01       	movw	r18, r26
 986:	2f 5f       	subi	r18, 0xFF	; 255
 988:	3f 4f       	sbci	r19, 0xFF	; 255
 98a:	31 83       	std	Z+1, r19	; 0x01
 98c:	20 83       	st	Z, r18
 98e:	8c 93       	st	X, r24
 990:	26 81       	ldd	r18, Z+6	; 0x06
 992:	37 81       	ldd	r19, Z+7	; 0x07
 994:	2f 5f       	subi	r18, 0xFF	; 255
 996:	3f 4f       	sbci	r19, 0xFF	; 255
 998:	37 83       	std	Z+7, r19	; 0x07
 99a:	26 83       	std	Z+6, r18	; 0x06
 99c:	14 c0       	rjmp	.+40     	; 0x9c6 <fputc+0x6e>
 99e:	8b 01       	movw	r16, r22
 9a0:	ec 01       	movw	r28, r24
 9a2:	fb 01       	movw	r30, r22
 9a4:	00 84       	ldd	r0, Z+8	; 0x08
 9a6:	f1 85       	ldd	r31, Z+9	; 0x09
 9a8:	e0 2d       	mov	r30, r0
 9aa:	19 95       	eicall
 9ac:	89 2b       	or	r24, r25
 9ae:	e1 f6       	brne	.-72     	; 0x968 <fputc+0x10>
 9b0:	d8 01       	movw	r26, r16
 9b2:	16 96       	adiw	r26, 0x06	; 6
 9b4:	8d 91       	ld	r24, X+
 9b6:	9c 91       	ld	r25, X
 9b8:	17 97       	sbiw	r26, 0x07	; 7
 9ba:	01 96       	adiw	r24, 0x01	; 1
 9bc:	17 96       	adiw	r26, 0x07	; 7
 9be:	9c 93       	st	X, r25
 9c0:	8e 93       	st	-X, r24
 9c2:	16 97       	sbiw	r26, 0x06	; 6
 9c4:	ce 01       	movw	r24, r28
 9c6:	df 91       	pop	r29
 9c8:	cf 91       	pop	r28
 9ca:	1f 91       	pop	r17
 9cc:	0f 91       	pop	r16
 9ce:	08 95       	ret

000009d0 <__ultoa_invert>:
 9d0:	fa 01       	movw	r30, r20
 9d2:	aa 27       	eor	r26, r26
 9d4:	28 30       	cpi	r18, 0x08	; 8
 9d6:	51 f1       	breq	.+84     	; 0xa2c <__ultoa_invert+0x5c>
 9d8:	20 31       	cpi	r18, 0x10	; 16
 9da:	81 f1       	breq	.+96     	; 0xa3c <__ultoa_invert+0x6c>
 9dc:	e8 94       	clt
 9de:	6f 93       	push	r22
 9e0:	6e 7f       	andi	r22, 0xFE	; 254
 9e2:	6e 5f       	subi	r22, 0xFE	; 254
 9e4:	7f 4f       	sbci	r23, 0xFF	; 255
 9e6:	8f 4f       	sbci	r24, 0xFF	; 255
 9e8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ea:	af 4f       	sbci	r26, 0xFF	; 255
 9ec:	b1 e0       	ldi	r27, 0x01	; 1
 9ee:	3e d0       	rcall	.+124    	; 0xa6c <__ultoa_invert+0x9c>
 9f0:	b4 e0       	ldi	r27, 0x04	; 4
 9f2:	3c d0       	rcall	.+120    	; 0xa6c <__ultoa_invert+0x9c>
 9f4:	67 0f       	add	r22, r23
 9f6:	78 1f       	adc	r23, r24
 9f8:	89 1f       	adc	r24, r25
 9fa:	9a 1f       	adc	r25, r26
 9fc:	a1 1d       	adc	r26, r1
 9fe:	68 0f       	add	r22, r24
 a00:	79 1f       	adc	r23, r25
 a02:	8a 1f       	adc	r24, r26
 a04:	91 1d       	adc	r25, r1
 a06:	a1 1d       	adc	r26, r1
 a08:	6a 0f       	add	r22, r26
 a0a:	71 1d       	adc	r23, r1
 a0c:	81 1d       	adc	r24, r1
 a0e:	91 1d       	adc	r25, r1
 a10:	a1 1d       	adc	r26, r1
 a12:	20 d0       	rcall	.+64     	; 0xa54 <__ultoa_invert+0x84>
 a14:	09 f4       	brne	.+2      	; 0xa18 <__ultoa_invert+0x48>
 a16:	68 94       	set
 a18:	3f 91       	pop	r19
 a1a:	2a e0       	ldi	r18, 0x0A	; 10
 a1c:	26 9f       	mul	r18, r22
 a1e:	11 24       	eor	r1, r1
 a20:	30 19       	sub	r19, r0
 a22:	30 5d       	subi	r19, 0xD0	; 208
 a24:	31 93       	st	Z+, r19
 a26:	de f6       	brtc	.-74     	; 0x9de <__ultoa_invert+0xe>
 a28:	cf 01       	movw	r24, r30
 a2a:	08 95       	ret
 a2c:	46 2f       	mov	r20, r22
 a2e:	47 70       	andi	r20, 0x07	; 7
 a30:	40 5d       	subi	r20, 0xD0	; 208
 a32:	41 93       	st	Z+, r20
 a34:	b3 e0       	ldi	r27, 0x03	; 3
 a36:	0f d0       	rcall	.+30     	; 0xa56 <__ultoa_invert+0x86>
 a38:	c9 f7       	brne	.-14     	; 0xa2c <__ultoa_invert+0x5c>
 a3a:	f6 cf       	rjmp	.-20     	; 0xa28 <__ultoa_invert+0x58>
 a3c:	46 2f       	mov	r20, r22
 a3e:	4f 70       	andi	r20, 0x0F	; 15
 a40:	40 5d       	subi	r20, 0xD0	; 208
 a42:	4a 33       	cpi	r20, 0x3A	; 58
 a44:	18 f0       	brcs	.+6      	; 0xa4c <__ultoa_invert+0x7c>
 a46:	49 5d       	subi	r20, 0xD9	; 217
 a48:	31 fd       	sbrc	r19, 1
 a4a:	40 52       	subi	r20, 0x20	; 32
 a4c:	41 93       	st	Z+, r20
 a4e:	02 d0       	rcall	.+4      	; 0xa54 <__ultoa_invert+0x84>
 a50:	a9 f7       	brne	.-22     	; 0xa3c <__ultoa_invert+0x6c>
 a52:	ea cf       	rjmp	.-44     	; 0xa28 <__ultoa_invert+0x58>
 a54:	b4 e0       	ldi	r27, 0x04	; 4
 a56:	a6 95       	lsr	r26
 a58:	97 95       	ror	r25
 a5a:	87 95       	ror	r24
 a5c:	77 95       	ror	r23
 a5e:	67 95       	ror	r22
 a60:	ba 95       	dec	r27
 a62:	c9 f7       	brne	.-14     	; 0xa56 <__ultoa_invert+0x86>
 a64:	00 97       	sbiw	r24, 0x00	; 0
 a66:	61 05       	cpc	r22, r1
 a68:	71 05       	cpc	r23, r1
 a6a:	08 95       	ret
 a6c:	9b 01       	movw	r18, r22
 a6e:	ac 01       	movw	r20, r24
 a70:	0a 2e       	mov	r0, r26
 a72:	06 94       	lsr	r0
 a74:	57 95       	ror	r21
 a76:	47 95       	ror	r20
 a78:	37 95       	ror	r19
 a7a:	27 95       	ror	r18
 a7c:	ba 95       	dec	r27
 a7e:	c9 f7       	brne	.-14     	; 0xa72 <__ultoa_invert+0xa2>
 a80:	62 0f       	add	r22, r18
 a82:	73 1f       	adc	r23, r19
 a84:	84 1f       	adc	r24, r20
 a86:	95 1f       	adc	r25, r21
 a88:	a0 1d       	adc	r26, r0
 a8a:	08 95       	ret

00000a8c <_exit>:
 a8c:	f8 94       	cli

00000a8e <__stop_program>:
 a8e:	ff cf       	rjmp	.-2      	; 0xa8e <__stop_program>
